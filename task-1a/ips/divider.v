/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module ns_logic (
  input Q0,
  input Q_1,
  input start_i,
  input \divisor-not-0 ,
  input \subtrahend>divisor ,
  output Q0next,
  output Q1next
);
  wire s0;
  wire s1;
  assign s0 = ~ Q0;
  assign s1 = ~ Q_1;
  assign Q0next = ((s0 & s1 & ~ \divisor-not-0  & start_i) | (Q_1 & ~ \subtrahend>divisor ));
  assign Q1next = ((s0 & s1 & \divisor-not-0  & start_i) | (Q_1 & \subtrahend>divisor ));
endmodule

module DIG_D_FF_AS_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input Set,
   input [(Bits-1):0] D,
   input C,
   input Clr,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= {Bits{1'b1}};
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module divider (
  input clk_i,
  input reset_i,
  input [3:0] dividend_i,
  input [3:0] divisor_i,
  input start_i,
  output busy_o,
  output finish_o,
  output [4:0] quotient_o
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire [1:0] s6;
  wire [1:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [3:0] s10;
  wire s11;
  wire [4:0] quotient_o_temp;
  wire [4:0] s12;
  wire [4:0] s13;
  wire [4:0] s14;
  wire s15;
  wire s16;
  wire [4:0] s17;
  wire s18;
  // div != 0
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i0 (
    .a( divisor_i ),
    .b( 4'b0 ),
    .\= ( s11 )
  );
  assign s2 = ~ s11;
  assign s18 = ~ (~ s2 & start_i);
  ns_logic ns_logic_i1 (
    .Q0( s0 ),
    .Q_1( s1 ),
    .start_i( start_i ),
    .\divisor-not-0 ( s2 ),
    .\subtrahend>divisor ( s3 ),
    .Q0next( s4 ),
    .Q1next( s5 )
  );
  // state
  DIG_D_FF_AS_Nbit #(
    .Bits(2),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i2 (
    .Set( 1'b0 ),
    .D( s6 ),
    .C( clk_i ),
    .Clr( reset_i ),
    .Q( s7 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i3 (
    .sel( s7 ),
    .in_0( dividend_i ),
    .in_1( s8 ),
    .in_2( s9 ),
    .in_3( 4'b0 ),
    .out( s10 )
  );
  // subtrahend
  DIG_D_FF_AS_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i4 (
    .Set( 1'b0 ),
    .D( s10 ),
    .C( clk_i ),
    .Clr( reset_i ),
    .Q( s9 )
  );
  // sub-div
  DIG_Sub #(
    .Bits(4)
  )
  DIG_Sub_i5 (
    .a( s9 ),
    .b( divisor_i ),
    .c_i( 1'b0 ),
    .s( s8 )
  );
  // quotient
  DIG_D_FF_AS_Nbit #(
    .Bits(5),
    .Default(0)
  )
  DIG_D_FF_AS_Nbit_i6 (
    .Set( 1'b0 ),
    .D( quotient_o_temp ),
    .C( clk_i ),
    .Clr( reset_i ),
    .Q( s12 )
  );
  // sub >= div
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i7 (
    .a( s9 ),
    .b( divisor_i ),
    .\> ( s15 ),
    .\= ( s16 )
  );
  Mux_2x1_NBits #(
    .Bits(5)
  )
  Mux_2x1_NBits_i8 (
    .sel( s18 ),
    .in_0( 5'b11111 ),
    .in_1( s12 ),
    .out( s14 )
  );
  assign s6[0] = s5;
  assign s6[1] = s4;
  assign s3 = (s15 | s16);
  // quotient + 1
  DIG_Add #(
    .Bits(5)
  )
  DIG_Add_i9 (
    .a( s12 ),
    .b( 5'b1 ),
    .c_i( 1'b0 ),
    .s( s17 )
  );
  assign s1 = s7[0];
  assign s0 = s7[1];
  assign busy_o = s7[0];
  assign finish_o = s7[1];
  Mux_2x1_NBits #(
    .Bits(5)
  )
  Mux_2x1_NBits_i10 (
    .sel( s3 ),
    .in_0( s12 ),
    .in_1( s17 ),
    .out( s13 )
  );
  Mux_4x1_NBits #(
    .Bits(5)
  )
  Mux_4x1_NBits_i11 (
    .sel( s7 ),
    .in_0( 5'b0 ),
    .in_1( s13 ),
    .in_2( s14 ),
    .in_3( 5'b0 ),
    .out( quotient_o_temp )
  );
  assign quotient_o = quotient_o_temp;
endmodule
